{
  "main_streamlit-version": {
    "patches/main_streamlit-version.patch": [
      "diff --git a/patches/main_streamlit-version.patch b/patches/main_streamlit-version.patch",
      "new file mode 100644",
      "index 0000000..e69de29"
    ],
    "requirements.txt": [
      "diff --git a/requirements.txt b/requirements.txt",
      "new file mode 100644",
      "index 0000000..8c52f88",
      "--- /dev/null",
      "+++ b/requirements.txt",
      "@@ -0,0 +1,46 @@",
      "+altair==5.1.2",
      "+attrs==23.1.0",
      "+blinker==1.6.3",
      "+cachetools==5.3.2",
      "+certifi==2023.7.22",
      "+charset-normalizer==3.3.1",
      "+click==8.1.7",
      "+colorama==0.4.6",
      "+gitdb==4.0.11",
      "+GitPython==3.1.40",
      "+idna==3.4",
      "+importlib-metadata==6.8.0",
      "+Jinja2==3.1.2",
      "+jsonschema==4.19.1",
      "+jsonschema-specifications==2023.7.1",
      "+markdown-it-py==3.0.0",
      "+MarkupSafe==2.1.3",
      "+mdurl==0.1.2",
      "+numpy==1.26.1",
      "+packaging==23.2",
      "+pandas==2.1.2",
      "+Pillow==10.1.0",
      "+protobuf==4.24.4",
      "+pyarrow==13.0.0",
      "+pydeck==0.8.1b0",
      "+Pygments==2.16.1",
      "+python-dateutil==2.8.2",
      "+pytz==2023.3.post1",
      "+referencing==0.30.2",
      "+requests==2.31.0",
      "+rich==13.6.0",
      "+rpds-py==0.10.6",
      "+six==1.16.0",
      "+smmap==5.0.1",
      "+streamlit==1.28.0",
      "+tenacity==8.2.3",
      "+toml==0.10.2",
      "+toolz==0.12.0",
      "+tornado==6.3.3",
      "+typing_extensions==4.8.0",
      "+tzdata==2023.3",
      "+tzlocal==5.2",
      "+urllib3==2.0.7",
      "+validators==0.22.0",
      "+watchdog==3.0.0",
      "+zipp==3.17.0"
    ],
    "diffs.json": [
      "diff --git a/diffs.json b/diffs.json",
      "new file mode 100644",
      "index 0000000..e152b24",
      "--- /dev/null",
      "+++ b/diffs.json",
      "@@ -0,0 +1,104 @@",
      "+{",
      "+  \"main_streamlit-version\": {",
      "+    \"app.py\": [",
      "+      \"diff --git a/app.py b/app.py\",",
      "+      \"new file mode 100644\",",
      "+      \"index 0000000..e8628fe\",",
      "+      \"--- /dev/null\",",
      "+      \"+++ b/app.py\",",
      "+      \"@@ -0,0 +1,92 @@\",",
      "+      \"+import streamlit as st\",",
      "+      \"+import json\",",
      "+      \"+import hashlib\",",
      "+      \"+\",",
      "+      \"+st.set_page_config(layout=\\\"wide\\\")\",",
      "+      \"+\",",
      "+      \"+if 'clicked_buttons' not in st.session_state:\",",
      "+      \"+    st.session_state['clicked_buttons'] = []\",",
      "+      \"+\",",
      "+      \"+\",",
      "+      \"+def sha256_hash(input_value): return hashlib.sha256(\",",
      "+      \"+    input_value.encode('utf-8')).hexdigest()[:8]\",",
      "+      \"+\",",
      "+      \"+\",",
      "+      \"+def clicked(col_cont):\",",
      "+      \"+    if (col_cont in st.session_state['clicked_buttons']):\",",
      "+      \"+        return \\\":green[Add Patch]\\\"\",",
      "+      \"+    else:\",",
      "+      \"+        return \\\"Add Patch\\\"\",",
      "+      \"+\",",
      "+      \"+\",",
      "+      \"+def isAdded(file_name):\",",
      "+      \"+    if (file_name in st.session_state['clicked_buttons']):\",",
      "+      \"+        return False\",",
      "+      \"+    else:\",",
      "+      \"+        return True\",",
      "+      \"+\",",
      "+      \"+\",",
      "+      \"+with open('diffs.json', encoding=\\\"utf-8\\\") as diff_file:\",",
      "+      \"+    diffs = json.load(diff_file)\",",
      "+      \"+\",",
      "+      \"+with st.sidebar:\",",
      "+      \"+    st.title(\\\"Par A..B usando Git Diff\\\")\",",
      "+      \"+    selected_branch = st.radio(\\\"---\\\", [branches for branches in diffs.keys()])\",",
      "+      \"+\",",
      "+      \"+st.title(f\\\"DifereΓö£┬║as entre [{selected_branch.split('_')[0]}] vs [{selected_branch.split('_')[1]}]\\\",\",",
      "+      \"+         anchor=\\\"center\\\", help=\\\"o patch exibido Γö£ΓîÉ uma representaΓö£┬║Γö£├║o das diferenΓö£┬║as entre a branch A e a branch B\\\")\",",
      "+      \"+\",",
      "+      \"+for files in diffs[selected_branch]:\",",
      "+      \"+    col_content, col_bring, col_remove = st.columns([0.8, 0.1, 0.1])\",",
      "+      \"+    file_hash = sha256_hash(str(diffs[selected_branch][files]))\",",
      "+      \"+\",",
      "+      \"+    with col_content:\",",
      "+      \"+        with st.expander(files):\",",
      "+      \"+            for line in diffs[selected_branch][files]:\",",
      "+      \"+                if (line.startswith('-')):\",",
      "+      \"+                    st.markdown(\",",
      "+      \"+                        f\\\":red[{line}]\\\", help=\\\"linhas que comeΓö£┬║am com --- mostram o que existe na branch (A) e nΓö£├║o na branch (B).\\\")\",",
      "+      \"+                elif (line.startswith('+')):\",",
      "+      \"+                    st.markdown(\",",
      "+      \"+                        f\\\":green[{line}]\\\", help=\\\"linhas que comeΓö£┬║am com +++ mostram o que existe na branch (B) e nΓö£├║o na branch (A).\\\")\",",
      "+      \"+                elif (line.startswith('@')):\",",
      "+      \"+                    st.markdown(\",",
      "+      \"+                        f\\\":blue[{line}]\\\", help=\\\"linhas que comeΓö£┬║am com @@ sΓö£├║o cabeΓö£┬║alhos de contexto para mostrar onde as mudanΓö£┬║as ocorrem no arquivo\\\")\",",
      "+      \"+                else:\",",
      "+      \"+                    st.markdown(f\\\"{line}\\\")\",",
      "+      \"+\",",
      "+      \"+    with col_bring:\",",
      "+      \"+        add_patch = st.button(label=clicked(file_hash), key=f\\\"{file_hash}\\\")\",",
      "+      \"+        patch = \\\"\\\"\",",
      "+      \"+        if (add_patch):\",",
      "+      \"+            if f\\\"{file_hash}\\\" not in st.session_state['clicked_buttons']:\",",
      "+      \"+                st.toast(f\\\"Patch criado para {selected_branch}\\\")\",",
      "+      \"+                st.session_state['clicked_buttons'].append(f\\\"{file_hash}\\\")\",",
      "+      \"+                for line in diffs[selected_branch][files]:\",",
      "+      \"+                    patch += f\\\"{line}\\\\n\\\"\",",
      "+      \"+                with open(f\\\"patches/{selected_branch}.patch\\\", 'a') as file:\",",
      "+      \"+                    file.write(patch)\",",
      "+      \"+                st.rerun()\",",
      "+      \"+            else:\",",
      "+      \"+                st.toast(f\\\"Patch jΓö£├¡ existe {selected_branch}\\\")\",",
      "+      \"+\",",
      "+      \"+    with col_remove:\",",
      "+      \"+        remove_patch = st.button(\",",
      "+      \"+            \\\"Remove Patch\\\", file_hash[::-1], disabled=isAdded(file_hash))\",",
      "+      \"+\",",
      "+      \"+        if (remove_patch):\",",
      "+      \"+            st.toast(f\\\"Patch removido para {selected_branch}\\\")\",",
      "+      \"+\",",
      "+      \"+            with open(f\\\"patches/{selected_branch}.patch\\\", 'r') as file:\",",
      "+      \"+                existing_patches = file.readlines()\",",
      "+      \"+\",",
      "+      \"+            lines_to_remove = diffs[selected_branch][files]\",",
      "+      \"+\",",
      "+      \"+            filtered_patches = [\",",
      "+      \"+                line for line in existing_patches if line not in lines_to_remove]\",",
      "+      \"+\",",
      "+      \"+            with open(f\\\"patches/{selected_branch}.patch\\\", 'w') as file:\",",
      "+      \"+                file.writelines(filtered_patches)\",",
      "+      \"+\",",
      "+      \"+            st.session_state['clicked_buttons'].remove(file_hash)\",",
      "+      \"+            st.rerun()\"",
      "+    ]",
      "+  }",
      "+}"
    ],
    "app.py": [
      "diff --git a/app.py b/app.py",
      "new file mode 100644",
      "index 0000000..e8628fe",
      "--- /dev/null",
      "+++ b/app.py",
      "@@ -0,0 +1,92 @@",
      "+import streamlit as st",
      "+import json",
      "+import hashlib",
      "+",
      "+st.set_page_config(layout=\"wide\")",
      "+",
      "+if 'clicked_buttons' not in st.session_state:",
      "+    st.session_state['clicked_buttons'] = []",
      "+",
      "+",
      "+def sha256_hash(input_value): return hashlib.sha256(",
      "+    input_value.encode('utf-8')).hexdigest()[:8]",
      "+",
      "+",
      "+def clicked(col_cont):",
      "+    if (col_cont in st.session_state['clicked_buttons']):",
      "+        return \":green[Add Patch]\"",
      "+    else:",
      "+        return \"Add Patch\"",
      "+",
      "+",
      "+def isAdded(file_name):",
      "+    if (file_name in st.session_state['clicked_buttons']):",
      "+        return False",
      "+    else:",
      "+        return True",
      "+",
      "+",
      "+with open('diffs.json', encoding=\"utf-8\") as diff_file:",
      "+    diffs = json.load(diff_file)",
      "+",
      "+with st.sidebar:",
      "+    st.title(\"Par A..B usando Git Diff\")",
      "+    selected_branch = st.radio(\"---\", [branches for branches in diffs.keys()])",
      "+",
      "+st.title(f\"Difere├ºas entre [{selected_branch.split('_')[0]}] vs [{selected_branch.split('_')[1]}]\",",
      "+         anchor=\"center\", help=\"o patch exibido ├⌐ uma representa├º├úo das diferen├ºas entre a branch A e a branch B\")",
      "+",
      "+for files in diffs[selected_branch]:",
      "+    col_content, col_bring, col_remove = st.columns([0.8, 0.1, 0.1])",
      "+    file_hash = sha256_hash(str(diffs[selected_branch][files]))",
      "+",
      "+    with col_content:",
      "+        with st.expander(files):",
      "+            for line in diffs[selected_branch][files]:",
      "+                if (line.startswith('-')):",
      "+                    st.markdown(",
      "+                        f\":red[{line}]\", help=\"linhas que come├ºam com --- mostram o que existe na branch (A) e n├úo na branch (B).\")",
      "+                elif (line.startswith('+')):",
      "+                    st.markdown(",
      "+                        f\":green[{line}]\", help=\"linhas que come├ºam com +++ mostram o que existe na branch (B) e n├úo na branch (A).\")",
      "+                elif (line.startswith('@')):",
      "+                    st.markdown(",
      "+                        f\":blue[{line}]\", help=\"linhas que come├ºam com @@ s├úo cabe├ºalhos de contexto para mostrar onde as mudan├ºas ocorrem no arquivo\")",
      "+                else:",
      "+                    st.markdown(f\"{line}\")",
      "+",
      "+    with col_bring:",
      "+        add_patch = st.button(label=clicked(file_hash), key=f\"{file_hash}\")",
      "+        patch = \"\"",
      "+        if (add_patch):",
      "+            if f\"{file_hash}\" not in st.session_state['clicked_buttons']:",
      "+                st.toast(f\"Patch criado para {selected_branch}\")",
      "+                st.session_state['clicked_buttons'].append(f\"{file_hash}\")",
      "+                for line in diffs[selected_branch][files]:",
      "+                    patch += f\"{line}\\n\"",
      "+                with open(f\"patches/{selected_branch}.patch\", 'a') as file:",
      "+                    file.write(patch)",
      "+                st.rerun()",
      "+            else:",
      "+                st.toast(f\"Patch j├í existe {selected_branch}\")",
      "+",
      "+    with col_remove:",
      "+        remove_patch = st.button(",
      "+            \"Remove Patch\", file_hash[::-1], disabled=isAdded(file_hash))",
      "+",
      "+        if (remove_patch):",
      "+            st.toast(f\"Patch removido para {selected_branch}\")",
      "+",
      "+            with open(f\"patches/{selected_branch}.patch\", 'r') as file:",
      "+                existing_patches = file.readlines()",
      "+",
      "+            lines_to_remove = diffs[selected_branch][files]",
      "+",
      "+            filtered_patches = [",
      "+                line for line in existing_patches if line not in lines_to_remove]",
      "+",
      "+            with open(f\"patches/{selected_branch}.patch\", 'w') as file:",
      "+                file.writelines(filtered_patches)",
      "+",
      "+            st.session_state['clicked_buttons'].remove(file_hash)",
      "+            st.rerun()"
    ],
    "differ.ps1": [
      "diff --git a/differ.ps1 b/differ.ps1",
      "index a2f4f66..100dd26 100644",
      "--- a/differ.ps1",
      "+++ b/differ.ps1",
      "@@ -1,11 +1,9 @@",
      " param(",
      "-    [string]$RepoURL = \"https://github.com/jvcss/jvcss.git\",",
      "+    [string]$RepoURL = \"https://github.com/jvcss/gitpick.git\",",
      "     [string]$DiretorioDestino = \"source\"",
      " )",
      " ",
      " $ignore = @(",
      "-    \".fvm/flutter_sdk\",",
      "-    \".fvm/fvm_config.json\",",
      "     \".gitignore\"",
      " )",
      " #≡ƒöÑ",
      "@@ -75,7 +73,7 @@ function Save-Diffs {",
      "         [string]$File,",
      "         [string]$Branch,",
      "         [string]$BaseA = \"main\",",
      "-        [string]$OutputFolder = \"C:\\work\\expert\\GitAutomations\"",
      "+        [string]$OutputFolder = \"C:\\Users\\vitim\\Documents\\sources\\javascript\\apps\\gitpick\"",
      "     )",
      "     #should save in the diffs.json the new object with its new content property",
      "     $outputFile = \"$($OutputFolder)\\diffs.json\""
    ]
  },
  "main_dev": {
    "app.py": [
      "diff --git a/app.py b/app.py",
      "new file mode 100644",
      "index 0000000..ebc6c86",
      "--- /dev/null",
      "+++ b/app.py",
      "@@ -0,0 +1,95 @@",
      "+import streamlit as st",
      "+import json",
      "+import hashlib",
      "+",
      "+st.set_page_config(layout=\"wide\")",
      "+",
      "+if 'clicked_buttons' not in st.session_state:",
      "+    st.session_state['clicked_buttons'] = []",
      "+",
      "+",
      "+def sha256_hash(input_value): return hashlib.sha256(",
      "+    input_value.encode('utf-8')).hexdigest()[:8]",
      "+",
      "+",
      "+def clicked(col_cont):",
      "+    print(col_cont)",
      "+    if (col_cont in st.session_state['clicked_buttons']):",
      "+        return \":green[Add Patch]\"",
      "+    else:",
      "+        return \"Add Patch\"",
      "+",
      "+",
      "+def isAdded(file_name):",
      "+    if (file_name in st.session_state['clicked_buttons']):",
      "+        return False",
      "+    else:",
      "+        return True",
      "+",
      "+",
      "+with open('diffs.json', encoding=\"utf-8\") as diff_file:",
      "+    diffs = json.load(diff_file)",
      "+",
      "+with st.sidebar:",
      "+    st.title(\"Par A..B usando Git Diff\")",
      "+    selected_branch = st.radio(\"---\", [branches for branches in diffs.keys()])",
      "+",
      "+st.title(f\"Difere├ºas entre [{selected_branch.split('_')[0]}] vs [{selected_branch.split('_')[1]}]\",",
      "+         anchor=\"center\", help=\"o patch exibido ├⌐ uma representa├º├úo das diferen├ºas entre a branch A e a branch B\")",
      "+",
      "+for files in diffs[selected_branch]:",
      "+    col_content, col_bring, col_remove = st.columns([0.8, 0.1, 0.1])",
      "+    file_hash = sha256_hash(str(diffs[selected_branch][files]))",
      "+",
      "+    with col_content:",
      "+        with st.expander(files):",
      "+            for line in diffs[selected_branch][files]:",
      "+                if (line.startswith('-')):",
      "+                    st.markdown(",
      "+                        f\":red[{line}]\", help=\"linhas que comecam com --- mostram o que existe na branch (A) e nao na branch (B).\")",
      "+                elif (line.startswith('+')):",
      "+                    st.markdown(",
      "+                        f\":green[{line}]\", help=\"linhas que comecam com +++ mostram o que existe na branch (B) e nao na branch (A).\")",
      "+                elif (line.startswith('@')):",
      "+                    st.markdown(",
      "+                        f\":blue[{line}]\", help=\"linhas que comecam com @@ sao cabecalhos de contexto para mostrar onde as mudancas ocorrem no arquivo\")",
      "+                else:",
      "+                    st.markdown(f\"{line}\")",
      "+",
      "+    with col_bring:",
      "+        add_patch = st.button(label=clicked(file_hash), key=f\"{file_hash}\")",
      "+        ",
      "+        if (add_patch):",
      "+            if f\"{file_hash}\" not in st.session_state['clicked_buttons']:",
      "+                patch = \"\"",
      "+                st.toast(f\"Patch criado para {selected_branch}\")",
      "+                st.session_state['clicked_buttons'].append(f\"{file_hash}\")",
      "+                for line in diffs[selected_branch][files]:",
      "+                    print(f\"{patch}\")",
      "+                    patch += f\"{line}\\n\"",
      "+                with open(f\"patches/{selected_branch}.patch\", 'w') as file:",
      "+                    file.write(patch)",
      "+                st.rerun()",
      "+            else:",
      "+                st.toast(f\"Patch ja existe {selected_branch}\")",
      "+",
      "+    with col_remove:",
      "+        remove_patch = st.button(",
      "+            \"Remove Patch\", file_hash[::-1], disabled=isAdded(file_hash))",
      "+",
      "+        if (remove_patch):",
      "+            st.toast(f\"Patch removido para {selected_branch}\")",
      "+",
      "+            with open(f\"patches/{selected_branch}.patch\", 'r') as file:",
      "+                existing_patches = file.readlines()",
      "+",
      "+            lines_to_remove = diffs[selected_branch][files]",
      "+",
      "+            filtered_patches = [",
      "+                line for line in existing_patches if line not in lines_to_remove]",
      "+",
      "+            with open(f\"patches/{selected_branch}.patch\", 'w') as file:",
      "+                file.writelines(filtered_patches)",
      "+",
      "+            st.session_state['clicked_buttons'].remove(file_hash)",
      "+            st.rerun()"
    ],
    "requirements.txt": [
      "diff --git a/requirements.txt b/requirements.txt",
      "new file mode 100644",
      "index 0000000..8c52f88",
      "--- /dev/null",
      "+++ b/requirements.txt",
      "@@ -0,0 +1,46 @@",
      "+altair==5.1.2",
      "+attrs==23.1.0",
      "+blinker==1.6.3",
      "+cachetools==5.3.2",
      "+certifi==2023.7.22",
      "+charset-normalizer==3.3.1",
      "+click==8.1.7",
      "+colorama==0.4.6",
      "+gitdb==4.0.11",
      "+GitPython==3.1.40",
      "+idna==3.4",
      "+importlib-metadata==6.8.0",
      "+Jinja2==3.1.2",
      "+jsonschema==4.19.1",
      "+jsonschema-specifications==2023.7.1",
      "+markdown-it-py==3.0.0",
      "+MarkupSafe==2.1.3",
      "+mdurl==0.1.2",
      "+numpy==1.26.1",
      "+packaging==23.2",
      "+pandas==2.1.2",
      "+Pillow==10.1.0",
      "+protobuf==4.24.4",
      "+pyarrow==13.0.0",
      "+pydeck==0.8.1b0",
      "+Pygments==2.16.1",
      "+python-dateutil==2.8.2",
      "+pytz==2023.3.post1",
      "+referencing==0.30.2",
      "+requests==2.31.0",
      "+rich==13.6.0",
      "+rpds-py==0.10.6",
      "+six==1.16.0",
      "+smmap==5.0.1",
      "+streamlit==1.28.0",
      "+tenacity==8.2.3",
      "+toml==0.10.2",
      "+toolz==0.12.0",
      "+tornado==6.3.3",
      "+typing_extensions==4.8.0",
      "+tzdata==2023.3",
      "+tzlocal==5.2",
      "+urllib3==2.0.7",
      "+validators==0.22.0",
      "+watchdog==3.0.0",
      "+zipp==3.17.0"
    ],
    "diffs.json": [
      "diff --git a/diffs.json b/diffs.json",
      "new file mode 100644",
      "index 0000000..e152b24",
      "--- /dev/null",
      "+++ b/diffs.json",
      "@@ -0,0 +1,104 @@",
      "+{",
      "+  \"main_streamlit-version\": {",
      "+    \"app.py\": [",
      "+      \"diff --git a/app.py b/app.py\",",
      "+      \"new file mode 100644\",",
      "+      \"index 0000000..e8628fe\",",
      "+      \"--- /dev/null\",",
      "+      \"+++ b/app.py\",",
      "+      \"@@ -0,0 +1,92 @@\",",
      "+      \"+import streamlit as st\",",
      "+      \"+import json\",",
      "+      \"+import hashlib\",",
      "+      \"+\",",
      "+      \"+st.set_page_config(layout=\\\"wide\\\")\",",
      "+      \"+\",",
      "+      \"+if 'clicked_buttons' not in st.session_state:\",",
      "+      \"+    st.session_state['clicked_buttons'] = []\",",
      "+      \"+\",",
      "+      \"+\",",
      "+      \"+def sha256_hash(input_value): return hashlib.sha256(\",",
      "+      \"+    input_value.encode('utf-8')).hexdigest()[:8]\",",
      "+      \"+\",",
      "+      \"+\",",
      "+      \"+def clicked(col_cont):\",",
      "+      \"+    if (col_cont in st.session_state['clicked_buttons']):\",",
      "+      \"+        return \\\":green[Add Patch]\\\"\",",
      "+      \"+    else:\",",
      "+      \"+        return \\\"Add Patch\\\"\",",
      "+      \"+\",",
      "+      \"+\",",
      "+      \"+def isAdded(file_name):\",",
      "+      \"+    if (file_name in st.session_state['clicked_buttons']):\",",
      "+      \"+        return False\",",
      "+      \"+    else:\",",
      "+      \"+        return True\",",
      "+      \"+\",",
      "+      \"+\",",
      "+      \"+with open('diffs.json', encoding=\\\"utf-8\\\") as diff_file:\",",
      "+      \"+    diffs = json.load(diff_file)\",",
      "+      \"+\",",
      "+      \"+with st.sidebar:\",",
      "+      \"+    st.title(\\\"Par A..B usando Git Diff\\\")\",",
      "+      \"+    selected_branch = st.radio(\\\"---\\\", [branches for branches in diffs.keys()])\",",
      "+      \"+\",",
      "+      \"+st.title(f\\\"DifereΓö£┬║as entre [{selected_branch.split('_')[0]}] vs [{selected_branch.split('_')[1]}]\\\",\",",
      "+      \"+         anchor=\\\"center\\\", help=\\\"o patch exibido Γö£ΓîÉ uma representaΓö£┬║Γö£├║o das diferenΓö£┬║as entre a branch A e a branch B\\\")\",",
      "+      \"+\",",
      "+      \"+for files in diffs[selected_branch]:\",",
      "+      \"+    col_content, col_bring, col_remove = st.columns([0.8, 0.1, 0.1])\",",
      "+      \"+    file_hash = sha256_hash(str(diffs[selected_branch][files]))\",",
      "+      \"+\",",
      "+      \"+    with col_content:\",",
      "+      \"+        with st.expander(files):\",",
      "+      \"+            for line in diffs[selected_branch][files]:\",",
      "+      \"+                if (line.startswith('-')):\",",
      "+      \"+                    st.markdown(\",",
      "+      \"+                        f\\\":red[{line}]\\\", help=\\\"linhas que comeΓö£┬║am com --- mostram o que existe na branch (A) e nΓö£├║o na branch (B).\\\")\",",
      "+      \"+                elif (line.startswith('+')):\",",
      "+      \"+                    st.markdown(\",",
      "+      \"+                        f\\\":green[{line}]\\\", help=\\\"linhas que comeΓö£┬║am com +++ mostram o que existe na branch (B) e nΓö£├║o na branch (A).\\\")\",",
      "+      \"+                elif (line.startswith('@')):\",",
      "+      \"+                    st.markdown(\",",
      "+      \"+                        f\\\":blue[{line}]\\\", help=\\\"linhas que comeΓö£┬║am com @@ sΓö£├║o cabeΓö£┬║alhos de contexto para mostrar onde as mudanΓö£┬║as ocorrem no arquivo\\\")\",",
      "+      \"+                else:\",",
      "+      \"+                    st.markdown(f\\\"{line}\\\")\",",
      "+      \"+\",",
      "+      \"+    with col_bring:\",",
      "+      \"+        add_patch = st.button(label=clicked(file_hash), key=f\\\"{file_hash}\\\")\",",
      "+      \"+        patch = \\\"\\\"\",",
      "+      \"+        if (add_patch):\",",
      "+      \"+            if f\\\"{file_hash}\\\" not in st.session_state['clicked_buttons']:\",",
      "+      \"+                st.toast(f\\\"Patch criado para {selected_branch}\\\")\",",
      "+      \"+                st.session_state['clicked_buttons'].append(f\\\"{file_hash}\\\")\",",
      "+      \"+                for line in diffs[selected_branch][files]:\",",
      "+      \"+                    patch += f\\\"{line}\\\\n\\\"\",",
      "+      \"+                with open(f\\\"patches/{selected_branch}.patch\\\", 'a') as file:\",",
      "+      \"+                    file.write(patch)\",",
      "+      \"+                st.rerun()\",",
      "+      \"+            else:\",",
      "+      \"+                st.toast(f\\\"Patch jΓö£├¡ existe {selected_branch}\\\")\",",
      "+      \"+\",",
      "+      \"+    with col_remove:\",",
      "+      \"+        remove_patch = st.button(\",",
      "+      \"+            \\\"Remove Patch\\\", file_hash[::-1], disabled=isAdded(file_hash))\",",
      "+      \"+\",",
      "+      \"+        if (remove_patch):\",",
      "+      \"+            st.toast(f\\\"Patch removido para {selected_branch}\\\")\",",
      "+      \"+\",",
      "+      \"+            with open(f\\\"patches/{selected_branch}.patch\\\", 'r') as file:\",",
      "+      \"+                existing_patches = file.readlines()\",",
      "+      \"+\",",
      "+      \"+            lines_to_remove = diffs[selected_branch][files]\",",
      "+      \"+\",",
      "+      \"+            filtered_patches = [\",",
      "+      \"+                line for line in existing_patches if line not in lines_to_remove]\",",
      "+      \"+\",",
      "+      \"+            with open(f\\\"patches/{selected_branch}.patch\\\", 'w') as file:\",",
      "+      \"+                file.writelines(filtered_patches)\",",
      "+      \"+\",",
      "+      \"+            st.session_state['clicked_buttons'].remove(file_hash)\",",
      "+      \"+            st.rerun()\"",
      "+    ]",
      "+  }",
      "+}"
    ],
    "differ.ps1": [
      "diff --git a/differ.ps1 b/differ.ps1",
      "index a2f4f66..100dd26 100644",
      "--- a/differ.ps1",
      "+++ b/differ.ps1",
      "@@ -1,11 +1,9 @@",
      " param(",
      "-    [string]$RepoURL = \"https://github.com/jvcss/jvcss.git\",",
      "+    [string]$RepoURL = \"https://github.com/jvcss/gitpick.git\",",
      "     [string]$DiretorioDestino = \"source\"",
      " )",
      " ",
      " $ignore = @(",
      "-    \".fvm/flutter_sdk\",",
      "-    \".fvm/fvm_config.json\",",
      "     \".gitignore\"",
      " )",
      " #≡ƒöÑ",
      "@@ -75,7 +73,7 @@ function Save-Diffs {",
      "         [string]$File,",
      "         [string]$Branch,",
      "         [string]$BaseA = \"main\",",
      "-        [string]$OutputFolder = \"C:\\work\\expert\\GitAutomations\"",
      "+        [string]$OutputFolder = \"C:\\Users\\vitim\\Documents\\sources\\javascript\\apps\\gitpick\"",
      "     )",
      "     #should save in the diffs.json the new object with its new content property",
      "     $outputFile = \"$($OutputFolder)\\diffs.json\""
    ],
    ".vscode/launch.json": [
      "diff --git a/.vscode/launch.json b/.vscode/launch.json",
      "new file mode 100644",
      "index 0000000..8a20538",
      "--- /dev/null",
      "+++ b/.vscode/launch.json",
      "@@ -0,0 +1,29 @@",
      "+{",
      "+    // Use IntelliSense to learn about possible attributes.",
      "+    // Hover to view descriptions of existing attributes.",
      "+    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387",
      "+    \"version\": \"0.2.0\",",
      "+    \"configurations\": [",
      "+        {",
      "+            \"name\": \"Python: Current File\",",
      "+            \"type\": \"python\",",
      "+            \"request\": \"launch\",",
      "+            \"program\": \"app.py\",",
      "+            \"console\": \"integratedTerminal\",",
      "+            \"justMyCode\": true",
      "+        },",
      "+        {",
      "+            \"name\": \"Python:Streamlit\",",
      "+            \"type\": \"python\",",
      "+            \"request\": \"launch\",",
      "+            ",
      "+            \"module\": \"streamlit\",",
      "+            \"args\": [",
      "+                 \"run\",",
      "+                 \"app.py\",",
      "+                 \"--server.port\",",
      "+                 \"3000\"",
      "+            ]",
      "+        }",
      "+    ]",
      "+}",
      "\\ No newline at end of file"
    ]
  }
}
